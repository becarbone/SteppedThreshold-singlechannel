//made by Bea Carbone - 2016

var sourcedir, sourcelist, color, channel, punctadir, thresholddir, resultsdir;
var nameArray, ROIareaArray, ROIpunctaArray,condition, filename, title, Num, are;
var number, area, shortTitle, tempTitle;

//choosing the source folder w/subfolders (automatically lists names of folders in results) 
//images should be single channel chosen ROI that were taken at 1048x1048 for appropriate sizing of puncta
//choosing the color of the channels, mostly for labeling's sake
waitForUser("This macro needs several folders: \n-one with the separate channel images in subfolders for conditions \n-an empty one for the puncta \n-an empty one for masks \n \n -Files need to be single channel images-");
sourcedir = getDirectory("Choose folder for images");
sourcelist = getFileList(sourcedir);

//the color selection is for recordkeeping as well as multiple channel analysis
//I took out that functionality as it wasn't widely better than this and took 
//too much processing power unnecessarily
Dialog.create("");
	color = newArray("Green", "Red", "Blue", "Cyan");
	Dialog.addChoice("Channel color", color, "Green");
Dialog.show;
channel = Dialog.getChoice;

//choosing folders for results output - the same output for all conditions to avoid needing to 
//pull some extra menu bullshit in creating subfolders
punctadir = getDirectory("Choose folder for "+channel+" puncta");
thresholddir = getDirectory("Choose folder for "+channel+" masks");
resultsdir = getDirectory("Choose folder for excel files");

//Needed to list the column titles
l = "thresholding";

//change here if you need to change the # of steps (1/2)
for(t=0;t<160;t+=3) {
	l = l +"," + t;
}

nameArray = newArray();

ROIareaArray = newArray(l,"");
ROIpunctaArray = newArray(l,"");

//the "meat" starts here
//goal: to assess the # and area of puncta at threshold intervals of 3 to a maximum of 159/255
//and try to present it in a way that allows for easy analysis of data.
//The final presentation of data should be brought into graphpad on an XvY graph of puncta(axis1) and area(axis2), to find
//a threshold point post-spike of the area and pre-spike or mid-spike of puncta count that reliably
//indicates the approximate description of the ROI it references.

for (i=0;i<sourcelist.length; i++) {
	condition = getFileList(sourcedir+sourcelist[i]);
	filename = File.getName(sourcedir+sourcelist[i]);
	ROIpunctaArray = Array.concat(ROIpunctaArray, filename);
	ROIareaArray = Array.concat(ROIareaArray, filename);
	for(d=0;d<condition.length;d++)	{
		open(sourcedir+sourcelist[i]+condition[d]);
		title = getTitle();
		run("Properties...", "channels=1 slices=1 frames=1 unit=um pixel_width=0.1705 pixel_height=0.1705 voxel_depth=1");
		run("Gaussian Blur...", "sigma=1");
		setColor("Magenta");
		Num = title;
		are = title;
		//change here if you want to change the # of steps (2/2)
		for(t=0;t<160;t+=3) {
			selectImage(title);
			shortTitle = substring(title, 0, lengthOf(title)-4);
			nameArray = Array.concat(nameArray, shortTitle+"_"+t);
			//for the definition of the mask function - see the bottom of the code
			mask();
			Num = Num + "," + number;
			are = are + "," + area;
			}
		ROIpunctaArray = Array.concat(ROIpunctaArray, Num);
		ROIareaArray = Array.concat(ROIareaArray, are);
		selectImage(title);
		close();
		selectWindow(title+"_"+channel+0+"_mask");
		run("Select None");
		setSlice(1);
		run("Label...", "format=Label starting=0 interval=1 x=5 y=5 font=8 text=[] range=1-51 use");
		saveAs("Tiff",thresholddir+shortTitle);
		close();
	}
}
//if area+1SD<puncta-1SD = take slice b/n the two
//now to look for where the average area (of which condition?) at a certain threshold is lowest
//and the average puncta is within 1 SD of the max value

Array.show(channel,ROIareaArray,ROIpunctaArray);
selectWindow(channel);
saveAs("Results",resultsdir+channel+".csv");

//Referenced functions are relegated to the end of the code

function mask() {
	tempTitle = getTitle();
	run("Clear Results");
	run("Threshold...");
	setAutoThreshold("Default dark");
	setThreshold(t,255);
	selectWindow(tempTitle);
	run("Find Maxima...", "noise=7.5 output=[Segmented Particles] above");
	selectImage(tempTitle+" Segmented");
	run("Watershed");
	run("Analyze Particles...", "size=1-60 pixel show=Masks add");
	number = roiManager("count");	
	roiManager("Measure");
	area = 0;
	if(roiManager("count")>0) {
		roiManager("Save",punctadir+"ROI_"+shortTitle+"_"+t+".zip");
		for(j=0;j<nResults;j++) {
			area = area + getResult("Area",j);
		}
		area = area/nResults;
	}
	roiManager("reset");
	selectImage("Mask of "+tempTitle+" Segmented"); 
	rename(title+"_"+channel+t+"_mask");
	selectImage(tempTitle+" Segmented");
	close();
	if(t>0){
		selectImage(title+"_"+channel+t+"_mask");
		run("Select All");
		run("Copy");
		close();
		selectImage(title+"_"+channel+0+"_mask");
		run("Add Slice");
		setSlice(nSlices);
		shortTitle = substring(title,0, lengthOf(title)-4);
		run("Set Label...", "label="+shortTitle+"_"+t);
		run("Paste");
	}
}
